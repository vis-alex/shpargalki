unix user - vis 
password - vis

Для работы на windows 10 нужно вклюить в биосе виртуализацию, включить hyper-v, скачать wsl2,
 скачать ubuntu в  microsoft shop, отключить IIS в компонентах

image - набор программ на основе которых запускается приложение (контейнер). Например JDK и MONGO DB
Как класс и обьект класса

TAG - версия образа

			Общие команды докера

docker info - команда выдает полную информацию о докере. Образы, контейнеры, состояние и т.д.

docker images - детальная информация об изображения

docker ps - детальная информация о контейнерах

docker stop conteiner_id - останавливает контейнер

docker start conteiner_id - запускает контейнер

docker pause conteiner_id - поставить контейнер на паузу

docker unpause conteiner_id - убирает у контейнера паузу. Разница в том что при запросе к приложению будет висеть 
пока не отпаузится, а при stop - страница например будет недоступна

docker login - авторизоваться в докере

docker logout - разлогиниться

				Основные функциональные команды

docker pull image_name : version - скачать образ из registry(jdk, phyton, etc) из registry (Например DockerHub)

docker run -it --name MyName openjdk - запускает образ в контейнере с именем MyName 
в интерактивном режиме и тут же в терминале мы можем писать java код
Чтобы выйти из редактора нужно нажать Ctrl + D

-d - позволяет запускать докер контейнер в фоновом режиме не заходя прям внутри нашего терминала. 
Чтобы мы могли продолжать писать оттуда команды

-р 80:80- соединяет порты на локальной машине и внутри докер контейнер, то есть внутри запущенного проекта

docker images rm image_id - удаляет образ

docker build path_to_dockerfile - позволяет построить наш персональный образ.
 Можно указать точку если находимся в той же директории что и Dockerfile

docker run -p 3001:8001 42e4d7430efd где 8001-порт из EXPOSE

docker build -t my-app ./php  - создание своего образа
 название образа my-app(нельзя верхний регистр), ищет докерфайл в папке php

				Создание Dockerfile
Имя должно быть Dockerfile в корне проекта

FROM openjdk:11   - указываем из какого образа мы будем брать информацию

COPY  . /app - какие файлы из текущего проекта мы будем копировать в docker Image(openjdk)
Первая Точка значит что из этой же папки в которой Dockerfile мы будем брать и копировать все файлы
Вместо этого можно указать определнный адрес, например /app/files/wsl.
Вторая точка значит адрес куда мы помещаем все файлы внутри нашего будущего образа. 
В нашем случае это /app

WORKDIR /app - указываем что рабочей директорией будет /app. Как бы мы указываем что внутри этой папки 
будут находиться все файлы которые нужно будет выполнить внутри нашего образа

EXPOSE port_number - позже по этому порту мы можем подключиться к приложению. Например через браузер

RUN javac Main.java- команда RUN позволяет выполнить определнные действия при первоначальном запуске 
самого образа.  javac Main.java - позволяет скомпилировать этот файл

CMD [ "java", "Main"] - выполняет команды при каждом запуске контейнера. Конкретно эти - запускают класс Main
Синтаксис аналог прописывания java Main в терминале, которыйй бы запустил на выполнение класс Main


				DOCKER COMPOSE
docker-compose.yml
- это файл в которомо можно описать множество различных образов, а также настройки к ним

version: '3.1'  - Принято указывать версию. Теперь не обязательно

services:  - это различные образы которые будут подключены
  php: - это название нашего вручную сделаного приложения
    build: ./php  - тут указываем путь к папке в которой лежит его Dockerfile
    ports: 
     - 8081:80    -не забываем что первый - это порт на локальнйо машине(они должны отличаться)
			а второй порт внутри image

  db:      - тут идут характеристики по подключению  
    image: mariadb:10.3 - указывается название образа и его версия
    restart: always  - тут мы указываем что делать если возникла проблема с образом(любая)
			no - не перезапускаем. always - всегда перезапускаем сервис
    command: --default-authentication-plugin=mysql_native_password   - это команда которая должна
		 выполняться при запуске контейнера. Аналог CMD из Dockerfile
    environment: - различные настройки которые могут понадобиться для работы с образом
      MYSQL_ROOT_PASSWORD: notSecureChangeMe  - например пароль  
 
  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports: 
      - 8080:80 
    environment: 
      - PMA_ARBITRARY=1

docker-compose build    - собирает сборный образ
docker-compose up  - запускает сборку образов уже на работу


				DOCKER NETWORK
docker network - для управления сетевыми операцими.Создание ,удаление, подключение отключение контейнера к/от сети

docker network ls - получить список ваших сетей

docker network create --driver bridge dhruv_net - создать новый сетевой драйвер

docker run -it -d --name A1 --network dhruv_net alpine ash - запустить контейнер внутри созданной нами сети

docker inspect container_name - проверить инфо о контейнере
docker network inspect bridge - проверить инфо о сети bridge

docker network disconnect network_name container_name - отключить контейнер от сети. 

-d - говорит Докер использовать сетевой драйвер моста (bridge)

-e - устанавливает переменные окружения

docker logs имя_контейнера   - выводит логи контейнера

docker exec -it container_name bash - запускает новую команду в контейнере 































