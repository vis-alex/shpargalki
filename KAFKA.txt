Kafka - это посредник для обмена сообщений. Очень быстрый. Задержка <= 10 мс

				АРХИТЕКТУРА КАФКА

Topic - поток сообщений. Большая масштабируемая труба. 
	- имеет имя
	- можно создавать сколько угодно топиков
	- Данные хранятся в нем указанное вермя. Default - 1 неделя

Partition - составная часть topic. Как будто трубки внутри большой трубы.
	- Каждый  partition сохраняет порядок сообщений добавляемых в него
	- Каждое сообщение в partition получает свой номер - называется offset

Broker - это сервер через который и пролегают трубки - партиции
	- Kafka состоит из нескольких серверов - брокеров
	- У брокера есть имя. И кафка управляет брокерами по их именам
	- Каждый брокер хранит в себе несколько партиций разных топиков
	- Каждый раз когда мы пишем сообщение в топик, оно попадает на один из брокеров, в один из партициев
	- Соединение с одним из брокеров означает соединение со всем  кластеров. То есть он узнает у брокера 
	  инфу о всех других брокерах которые есть в кафке. То есть благодаря этому нет передачи между брокерами
	- В продакшне не рекомендуется делать количество брокеров меньше 3. Для устойчивости
	- Подобная система , когда обращаясь к одному брокеру мы получаем информацию о всех остальных называется
	  bootstrap server

Топики делятся на партиции,а  партиции делятся на реплики.

Leader - одна из копий partition, которая считается главной, эталоном. Остальные рпелики только синхронизируются
с ней. В каждый момент только одна копия может быть leader

Producer - пишет сообщения в топик. Автоматически понимает в какой брокер и партишн писать. Если брокер в который
 кафка пишет сообщения падает, kafka client исправляет ситуацию автоматически. Нагрузка самобалансируется по раз-
ным брокерам и партишнам

Producer ack(когда клиент пищет запись в кафку) - есть 3 уровня уверенности в том, что мы не потеряли записи:
Называется acknowledgement - флаг для топика в конфигах
	acks=0 - не ждем подтверждения записи
	acks=1 - ждем подтверждения лидера(обычно используется)
	acks=all - ждем подтверждения всех

Message Key - 
	- Key может быть null
	- Если null, то выбирается партишн по round robin(равномерно размазывается)
	- Если не null, то все сообщения пишутся всегда в один партишн
	- Key используется для сохранения порядка сообщений для одной бизнес сущности (Events одного клиента, 
	логи одного сервиса, изменения из одного источника)
    
Consumer - читает сообщения из топика. Он знает из какого брокера читать( leader). При падении брокера знает
что делать. 
	- Из одного партишна сообщения читаются FIFO
	- Из разных партишнов сообщения могут читаться в любом порядке (ВАЖНО!)

Consumer Group - используется для масштабирования чтения сообщений. По сути это имя которые consumers присваивают
себе, и по нему брокеры понимают что с этим топиков связано много consumer и должны отдавать сообщения из партишнов
в  разные консюмеры

Consumer и Partition offset - для каждого consumer group для каждого partition кафка сохраняет offset - 
указатель на то, какое сообщение читать дальше. Consumer должен коммитить свой offset. Если консюмер упадет -
он сможет продолжить потом с того сообщения где остановился, зная офсет

Гарантии доставки сообщений:
	- At most once - кафка может получить , а может и не получить сообщение (теряется примерно 0.01 %)
	- At least once - коммит после обработки сообщения консюмером. Более затратно, но более надежно. 
	  Консюмер должен быть идемпотентным. (Самое распространенное)
	- Exactly once - только в kafka streams api

	

					ПРАКТИКА
1) docker network create kafkanet - создаем сеть в докере
2) docker run -d --network=kafkanet --name=zookeeper 
	-e ZOOKEEPER_CLIENT_PORT=2181 -e ZOOKEEPER_TICK_TIME=2000 
	-p 2181:2181 confluentinc/cp-zookeeper       - запускаем контейнер с зоокипером
3)docker run -d --network=kafkanet --name=kafka
	-e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
 	-e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 -p 9092:9092 confluentinc/cp-kafka
 - запуск контейнера с кафкой
4) docker exec -it kafka bash  - подключение к терминалу контейнера кафка
5)/bin/kafka-topics --create --topic demo-topic --bootstrap-server kafka:9092 - создаем топик в кафке
6)/bin/kafka-topics --list --bootstrap-server localhost:909 - вывожу список топиков
7)/bin/kafka-topics --describe --topic demo-topic --bootstrap-server kafka:9092 - вывести описание demo-topic
8) /bin/kafka-console-producer --topic demo-topic --bootstrap-server kafka:9092 - генерация сообщений
9)/bin/kafka-console-consumer --topic demo-topic --from-beginning --bootstrap-server kafka:9092 - чтение сообщений

10) /bin/kafka-topics --bootstrap-server localhost:9092 --alter --topic demo-topic --partitions 3
		- устнаовление числа партишнов кафка в 3 шт

11) /bin/kafka-topics --describe --topic demo-topic --bootstrap-server kafka:9092 - описание топика

12) docker exec -it kafka /bin/kafka-console-consumer --topic demo-topic --group demo-group --bootstrap-server kafka:9092
	- запуск консюмера в отдельном окне. group - значит что будут разделять потребление сообщений.
	Если одна группа то это один большой распределенный потребитель

				DEPENDENCY KAFKA
В помнике : 
org.apache.kafka
kafka-clients
2.7.0






