Принято скачанный вебдрайвер положить в папке недалеко от корня для удобства.

Подключить селениум 

 <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>LATEST</version>
</dependency>

Добавил депенденси для хромдрайвера

 <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-chrome-driver</artifactId>
      <version>3.141.59</version>
</dependency>


				РАБОТА С XPATH ЛОКАТОРАМИ

Хороший xpath начинается с //
//*[text()='Войти'] - поиску по всем тегам с текстовым значеним "Войти"
//span[text()='Войти'] - поиску по тегу span со значением "Войти"

//span[@class='_25d45facb5--text--rH6sj'] - поиску тега span по классу

//a[@href='/authenticate/?returnUrl=https://www.cian.ru/'] - поиск элемента по ссылке

//span[contains(text(), 'Войти')] - ищете элемент содержащий текст "Войти". Можно искать по части текста
Например "Войт"

//span[starts-with(text(), 'Вой')] - найти элемент с текстом  начинающимся с букв "Вой"

//span[@id='super_id']

(//span[@class=‘class_name’])[1] - XPath первого элемента
(//span[@class=‘class_name’])[2] - XPath второго элемента  - вот так находятся одинаковые элементы

//div[@class='_25d45facb5--place--MmHod']/preceding-sibling::div - найти предшествующий div
 для div с указанным классом. То есть мы находим элемент а потом берем элемент находящийся выше в DOM
 
//div[@class='_25d45facb5--place--MmHod']/following-sibling::div - найти сестринский элемент по DOM снизу

//div[@class='_25d45facb5--place--MmHod']/parent::div - находит родительский элемент div

//div[@class='_25d45facb5--place--MmHod']/parent::div/parent::div - найти "дедушку"

//div[@class='_25d45facb5--place--MmHod']/ancestor::div - найти самого дальнего предка с таким тегом

//div[@class='_25d45facb5--place--MmHod']/child::* - найти любой первый дочерний элемент нашего элемента
Можно child опустить. Следующая запись аналогична

//div[@class='_25d45facb5--place--MmHod']/*

//div[@class='_25d45facb5--place--MmHod']/descendant::span - находит ближайшего потомка span

//input[@name='ololo' and contains (@value, 'tololo')] - поиск по нескольким аттрибутам 


					ПОИСК ЭЛЕМЕНТОВ ПО ЛОКАТОРАМ

//By.xpath("//input[@aria-label='Найти']") - это и есть локатор
        //Обьект By используется для поиска элементов DOM. Искать можно по xpath(Как указано выше)
        //Можно искать по cssSelector
        //Можно искать по className() - ищем по аттрибуту class. Не очень удобно
        // потому что у элементов часто бывают одинаковые классы
        //Можно искать по id() - очень удобный поиск по аттрибуту id. Проблема в том что бывает
        //что серверы генерируют id динамически. И при добавлении элементов id смещаются
        //Можно искать по linkText() - ищет по ссылке(аттрибут href) но излишне затрачивают ресурсы
        //Можно искать по name - поиск по атррибуту name

					CSS СЕЛЕКТОРЫ
Пишется в консоли разработчика $$("") внутри кавычек

1) Просто по названию тега. Например $$("body")
2) По id - $$("#sfcnt"). Нужен знак решетки для обозначения что это поиск по айди
3) По классу - $$(".sfcnt"). Нужен знак точки для обозначения поиска по классу
4) По аттрибуту $$("[attr_name='lisk']"). МОжно удалить значение $$("[attr_name='lisk']") и тогда будет искать 
все элементы у которых есть аттрибут role

5) $$("div[role*='ai']") - ищет все div у которых в аттрибуте role есть символы ai 
6) $$("div[role^='ai']") - ищет все div у которых в аттрибуте role значение начинается с символов ai 
7) $$("div[role$='ai']") - ищет все div у которых в аттрибуте role значение заканчивается символами ai 

8) У элемента может быть несколько классов через пробел class = "abr brb css"
 $$(".abr.brb.css") - ищет по нескольким классам
9) $$(".abr.brb[role='riko']") поиск по 2 классам и аттрибуту role=riko

10) $$("div:not(.col)") - ищет div у которого не должно быть класса col
11) $$("a:not(href^='http')") - ищет a в котором в элементе href нет символов http в начале

12)$$("div[role*='ai'] div.luke") ищет div с классом luke вложенный в другой div с аттрибутом role и символами 
ai в нем. Ищет вглубь по максимуму проходя все уровни. То есть ищет потомка
13) $$("div[role*='ai'] > div.luke") - вот так ищет непосредственно ребенка

14) $$("ul li:first-child") - вот так мы ищем тег ul а у него первый ребенок li. В итоге получаем первый li
15) $$("ul li:last-child") - ищет последнего ребенка
16) $$("ul li:nth-child(2)") - иищем второго ребенка посередине













